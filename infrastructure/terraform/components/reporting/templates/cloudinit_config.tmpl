<powershell>

# Create scripts directory if it doesn't exist
if (!(Test-Path -Path "C:\scripts")) {
    New-Item -ItemType Directory -Path "C:\scripts"
}

# Create the install_powerbi_gateway.ps1 script
$installPowerBiGatewayScript = @"
# Set execution policy to bypass
Set-ExecutionPolicy Bypass -Scope Process -Force

# Enable TLS 1.2
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072

# Download and install Chocolatey (if not already installed)
if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
}

# Install PowerBI On-Premises Gateway and Desktop
choco install -y powerbigateway --version=3000.230.14 --ignore-checksums
choco install -y powerbi --ignore-checksums

# Install vim
choco install -y vim

# Install Powershell 7
choco install -y powershell-core

# Install Amazon Athena ODBC 2.x Driver
`$athenaDriverUrl = "https://s3.amazonaws.com/athena-downloads/drivers/ODBC/v2.0.3.0/Windows/AmazonAthenaODBC-2.0.3.0.msi"
`$athenaDriverInstaller = "C:\scripts\SimbaAthenaODBC.msi"
Invoke-WebRequest -Uri `$athenaDriverUrl -OutFile `$athenaDriverInstaller

# Silent installation of Amazon Athena ODBC driver
Start-Process -FilePath `$athenaDriverInstaller -ArgumentList "/quiet" -Wait

# Configure the ODBC Connection:
`$odbcDsnName = "${odbc_dsn_name}"
`$odbcDescription = "${odbc_description}"
`$region = "${region}"
`$catalog = "${catalog}"
`$database = "${database}"
`$workgroup = "${workgroup}"
`$authenticationType = "${authentication_type}"

# Path to the ODBC DSN registry key
`$odbcDsnPath = "HKLM:HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBC.INI\`$odbcDsnName"
`$odbcDsnListPath = "HKLM:\HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBC.INI\ODBC Data Sources"

# Create the DSN key and set values
New-Item -Path `$odbcDsnPath -Force
Set-ItemProperty -Path `$odbcDsnPath -Name "Description" -Value `$odbcDescription
Set-ItemProperty -Path `$odbcDsnPath -Name "AwsRegion" -Value `$region
Set-ItemProperty -Path `$odbcDsnPath -Name "Catalog" -Value `$catalog
Set-ItemProperty -Path `$odbcDsnPath -Name "Schema" -Value `$database
Set-ItemProperty -Path `$odbcDsnPath -Name "Workgroup" -Value `$workgroup
Set-ItemProperty -Path `$odbcDsnPath -Name "AuthenticationType" -Value `$authenticationType

# Add the DSN to the list of ODBC Data Sources
Set-ItemProperty -Path `$odbcDsnListPath -Name `$odbcDsnName -Value "Amazon Athena ODBC (x64)"

Write-Output "ODBC DSN '`$odbcDsnName' created successfully."

Write-Output "Power BI on-premises data gateway and Amazon Athena ODBC driver installation completed."

# Check if PowerShell 7 (pwsh) is installed and available
`$pwshPath = "C:\Program Files\PowerShell\7\pwsh.exe"
if (Test-Path `$pwshPath) {
    # Invoke PowerShell 7 to run the remaining commands
    & `$pwshPath -ExecutionPolicy Bypass -Command {
        # Set execution policy to bypass
        Set-ExecutionPolicy Bypass -Scope Process -Force

        # Install DataGateway CMDLets
        Install-Module -Name DataGateway -Force -AllowClobber -Scope AllUsers

        # Install AWSCLI
        choco install -y awscli
        `$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")

        # Verify AWS CLI installation
        if (!(Get-Command aws -ErrorAction SilentlyContinue)) {
            Write-Output "AWS CLI installation failed or not found in PATH."
            exit 1
        }

        # Get the client (application) and tenant id's
        `$clientId = aws ssm get-parameter --name ${client_id} --with-decryption --query Parameter.Value --output text
        `$tenantId = aws ssm get-parameter --name ${tenant_id} --with-decryption --query Parameter.Value --output text

        # Get and convert the client secret and recovery key to SecureStrings
        `$clientSecretPlainText = aws ssm get-parameter --name ${client_secret} --with-decryption --query Parameter.Value --output text
        `$clientSecret = `$clientSecretPlainText | ConvertTo-SecureString -AsPlainText -Force
        `$recoveryKeyPlainText = aws ssm get-parameter --name ${recovery_key} --with-decryption --query Parameter.Value --output text
        `$recoveryKey = `$recoveryKeyPlainText | ConvertTo-SecureString -AsPlainText -Force

        # Login to the PowerBI Service using the Service Principal (proposed, untested) https://learn.microsoft.com/en-us/powershell/module/datagateway.profile/connect-datagatewayserviceaccount?view=datagateway-ps
        # Connect-DataGatewayServiceAccount -ApplicationId `$clientId -ClientSecret `$clientSecret -Tenant `$tenantId
        # Install the gateway
        # Install-DataGateway -AcceptConditions
        # Register the Gateway (proposed, untested) https://learn.microsoft.com/en-us/powershell/module/datagateway/add-datagatewaycluster?view=datagateway-ps
        # Add-DataGatewayCluster -RecoveryKey `$recoveryKey -Name ${gateway_name} -RegionKey uksouth
    }
}
else {
    Write-Output "AWSCLI & PowerShell 7 installation failed or path not found."
}

# Function to disable Internet Explorer Enhanced Security Configuration (ESC)
# Required due to ESC rejecting Microsoft's own SSO endpoints - https://login.microsoftonline.com, https://aadcdn.msftauth.net, https://fs.nhs.net
function Disable-InternetExplorerESC {
    `$AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
    `$UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
    Set-ItemProperty -Path `$AdminKey -Name "IsInstalled" -Value 0 -Force
    Set-ItemProperty -Path `$UserKey -Name "IsInstalled" -Value 0 -Force
    Stop-Process -Name Explorer -Force
    Write-Host "IE Enhanced Security Configuration (ESC) has been disabled." -ForegroundColor Green
}

# Function to enable Internet Explorer Enhanced Security Configuration (ESC)
function Enable-InternetExplorerESC {
    `$AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
    `$UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
    Set-ItemProperty -Path `$AdminKey -Name "IsInstalled" -Value 1 -Force
    Set-ItemProperty -Path `$UserKey -Name "IsInstalled" -Value 1 -Force
    Stop-Process -Name Explorer -Force
    Write-Host "IE Enhanced Security Configuration (ESC) has been enabled." -ForegroundColor Green
}

# Disable IE ESC
Disable-InternetExplorerESC

"@
Set-Content -Path "C:\scripts\install_powerbi_gateway.ps1" -Value $installPowerBiGatewayScript

# Execute the script
powershell.exe -ExecutionPolicy Bypass -File "C:\scripts\install_powerbi_gateway.ps1" > "C:\scripts\install_powerbi_gateway.log" 2>&1

</powershell>
